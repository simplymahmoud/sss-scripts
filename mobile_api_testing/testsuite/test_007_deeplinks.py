# -*- coding: utf-8 -*-
from testframework.base import *
import types


deeplinks_response_headers = {'Connection': 'Keep-Alive', 
                              'Cache-Control': 'public, s-maxage=86400', 
                              'Content-Type': 'application/vnd.api+json; charset=utf-8'}

deeplinks = {
            "type": "deeplinks",
            "id": "38969115",
            "attributes": {
                "entity_type": "product",
                "entity_id": 120608,
                "request_path": "sports/all/adidas-ace-173-primemesh-firm-ground-football-shoe-adft-bb1762",
                "target_path": "sports/all/adidas-ace-173-primemesh-indoor-football-shoe-adft-bb1762",
                "redirect_type": 301,
                "store_id": 1,
                "description": '',
                "is_autogenerated": 0,
                "metadata": "a:1:{s:11:\"category_id\";s:3:\"901\";}"
            },
            "links": {
                "self": "https://api-staging.sssports.com/v1/deeplinks/38969115"
            }
        }

no_deeplinks = 1



class TestDeeplinks(BaseTest):


    def test001_get_deeplinks(self):
        """ TestCase-11: Test case for test get /deeplinks.*
        **Test Scenario:**
        #. Get /deeplinks, should succeed
        #. Check response headers, should succeed
        #. Check response body, should succeed
        """    	
        self.lg('%s STARTED' % self._testID)
        response = self.get_request_response(uri='/deeplinks?filter%5Brequest_path%5D=sports/all/adidas-ace-173-primemesh-firm-ground-football-shoe-adft-bb1762&filter%5Blocale%5D=en_AE')
        
        self.lg('#. Get /deeplinks, should succeed')
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.ok)
        
        self.lg('#. Check response headers, should succeed')
        [self.assertIn(header, response.headers.keys()) for header in deeplinks_response_headers.keys()]
        [self.assertEqual(deeplinks_response_headers[header], response.headers[header]) for header in deeplinks_response_headers.keys()]
        
        self.lg('#. Check response body, should succeed')
        self.assertEqual(type(response.json()), types.DictType)

        self.assertIn('data', response.json().keys())
        self.assertEqual(type(response.json()['data']), types.ListType)
        self.assertEqual(len(response.json()['data']), no_deeplinks)
        [self.assertEqual(type(deeplinks_dict), types.DictType) for deeplinks_dict in response.json()['data']]

        for deeplinks_dict in response.json()['data']:
            for key in deeplinks_dict.keys():
                self.assertIn(key, deeplinks.keys())
            if deeplinks_dict['id'] == deeplinks['id']:
               self.assertEqual(deeplinks_dict['type'], deeplinks['type']) 
               self.assertEqual(deeplinks_dict['links'], deeplinks['links']) 

        self.lg('%s ENDED' % self._testID)                        

    def test002_get_deeplink(self):
        """ TestCase-12: Test case for test get /deeplinks/{id}.*
        **Test Scenario:**
        #. Get /deeplinks/{id}, should succeed
        #. Check response headers, should succeed
        #. Check response body, should succeed
        """    	
        self.lg('%s STARTED' % self._testID)   
        response = self.get_request_response(uri='/deeplinks/%s' % deeplinks['id'])
        
        self.lg('#. Get /blocks/{id}, should succeed')
        self.assertEqual(response.status_code, 200)
        self.assertTrue(response.ok)        
        
        self.lg('#. Check response headers, should succeed')
        [self.assertIn(header, response.headers.keys()) for header in deeplinks_response_headers.keys()]
        [self.assertIn(deeplinks_response_headers[header], response.headers[header]) for header in deeplinks_response_headers.keys()]        
        
        self.lg('#. Check response body, should succeed')
        self.assertEqual(type(response.json()), types.DictType)  
        
        self.assertIn('data', response.json().keys())
        self.assertEqual(type(response.json()['data']), types.DictType)
        self.assertEqual(response.json()['data']['id'], deeplinks['id']) 
        self.assertEqual(response.json()['data']['type'], deeplinks['type']) 
        self.assertEqual(response.json()['data']['links'], deeplinks['links']) 
        
        self.lg('%s ENDED' % self._testID)